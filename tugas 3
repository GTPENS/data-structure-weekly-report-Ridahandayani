

Tugas



#include <iostream>

using namespace std;

struct Node {
  int data;
  Node* next;
};

class LinkedList {
private:
  Node* head;

public:
  LinkedList() : head(nullptr) {}

  // 1. Sisipkan di awal
  void sisipkanDiAwal(int data) {
    Node* newNode = new Node;
    newNode->data = data;
    newNode->next = head;
    head = newNode;
  }

  // 2. Cetak isi list
  void cetakList() {
    Node* temp = head;
    while (temp != nullptr) {
      cout << temp->data << " ";
      temp = temp->next;
    }
    cout << endl;
  }

  // 3. Cari node tertentu
  bool cari(int data) {
    Node* temp = head;
    while (temp != nullptr) {
      if (temp->data == data) {
        return true;
      }
      temp = temp->next;
    }
    return false;
  }

  // 4. Hapus node pertama
  void hapusPertama() {
    if (head == nullptr) {
      cout << "List kosong!" << endl;
      return;
    }
    Node* temp = head;
    head = head->next;
    delete temp;
  }

  // 5. Hapus node di tengah
  void hapusNode(int data) {
    Node* temp = head;
    Node* prev = nullptr;

    while (temp != nullptr && temp->data != data) {
      prev = temp;
      temp = temp->next;
    }

    if (temp == nullptr) {
      cout << "Node tidak ditemukan!" << endl;
      return;
    }

    if (prev == nullptr) {
      // Hapus node pertama (ditangani di hapusPertama)
      hapusPertama();
      return;
    }

    prev->next = temp->next;
    delete temp;
  }

  // 6. Hapus node terakhir
  void hapusTerakhir() {
    Node* temp = head;
    Node* prev = nullptr;

    while (temp != nullptr && temp->next != nullptr) {
      prev = temp;
      temp = temp->next;
    }

    if (temp == nullptr) {
      cout << "List kosong!" << endl;
      return;
    }

    if (prev == nullptr) {
      // Hanya ada satu node, set head ke null
      head = nullptr;
    } else {
      prev->next = nullptr;
    }
    delete temp;
  }
};

int main() {
  LinkedList list;

  list.sisipkanDiAwal(5);
  list.sisipkanDiAwal(3);
  list.sisipkanDiAwal(1);

  cout << "List: ";
  list.cetakList();  // Output: 1 3 5

  if (list.cari(3)) {
    cout << "Node dengan data 3 ditemukan." << endl;
  }

  list.hapusPertama();

  cout << "List setelah menghapus node pertama: ";
  list.cetakList();  // Output: 3 5

  list.hapusNode(5);

  cout << "List setelah menghapus node dengan data 5: ";
  list.cetakList();  // Output: 3

  list.hapusTerakhir();

  cout << "List setelah menghapus node terakhir: ";
  list.cetakList();  // Output: List kosong

  return 0;
}


